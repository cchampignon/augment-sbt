#!/bin/sh
#
# {NAME}
# chkconfig: 2345 98 55
# description: Initstartup script for {NAME}
# processname: java

# Source function library.
. /etc/init.d/functions

BASE_DIR="{INSTALLATION_DIRECTORY}"
PROC="init-d-identifier={NAME}"
USER="{LINUX_USER}"
prog="{NAME}"
PID="$BASE_DIR/RUNNING_PID" # RUNNING_PID is a Play thing
STDOUT_LOG="logs/stdout.log"
CONFIG_DIR="$BASE_DIR/conf"
# if nohup is used then `kill -15` has to be used to stop
FULL_COMMAND="nohup $BASE_DIR/bin/start >> $BASE_DIR/$STDOUT_LOG 2>&1 &"

# some Java-based services will die if they cannot resolve the hostname of the machine
# (like ehcache, slf4j); this function adds hostname to /etc/hosts at 127.0.0.1 if its
# not already present or if no 127.0.0.1 entry exists, creates it
update_hostname() {
    HOSTNAME=`hostname`
    ETC_HOSTS=/etc/hosts
    if ! grep $HOSTNAME $ETC_HOSTS > /dev/null ; then
        if grep "127.0.0.1" $ETC_HOSTS > /dev/null ; then
            sed -i "s/127\.0\.0\.1.*$/& $HOSTNAME/" $ETC_HOSTS
        else
            echo "127.0.0.1 localhost $HOSTNAME" >> $ETC_HOSTS
        fi
    fi
}

fail_if_proc_is_running(){
    IS_RUNNING=`pgrep -f "$PROC"`
    if [ ! -z "$IS_RUNNING" ];  then
      failure
      echo
      echo "Warning: Process is already running, pid: $IS_RUNNING"
      exit 0;
    fi
}

fail_if_proc_is_not_running(){
    IS_RUNNING=`pgrep -f "$PROC"`
    if [ -z "$IS_RUNNING" ];  then
      failure
      echo
      echo "Warning:  Process was not running!"
      RET=0
    else
      RET=1
    fi
    return $RET
}

start()
{
    chown -R $USER.$USER $BASE_DIR
    update_hostname
    echo -n "Starting $prog: "
    fail_if_proc_is_running
    cd $BASE_DIR
    if [ -d ./logs ]; then
        chown $USER.$USER ./logs/*.log 2>/dev/null
    fi
    if [ -e ./logs/stdout.log ]; then
        rm ./logs/stdout.log
    fi
    daemon --pidfile $PID --user $USER $FULL_COMMAND
    # if runuser is used instead of daemon then the account requires an actual login shell (i.e., /bin/bash)
    #runuser -g $USER --command="$FULL_COMMAND" --preserve-environment $USER && success || failure
    echo -n "please wait 2 seconds.....  "
    sleep 2
    IS_RUNNING=`pgrep -f "$PROC"`
    echo -n "$prog status: "
    if [ -n "$IS_RUNNING" ];  then
      success
      RETVAL=1
    else
      failure
      RETVAL=0
    fi
    echo
    return $RETVAL
}

stop()
{
    echo -n "Stopping $prog: "
    fail_if_proc_is_not_running
    IS_RUNNING=`pgrep -f "$PROC"`
    if [ -n "$IS_RUNNING" ];  then
        kill -15 `pgrep -f "$PROC"` && success || failure
        RETVAL=$?
    fi
    rm -f $PID
    if [ -e $BASE_DIR/RUNNING_PID ]; then
        rm -f $BASE_DIR/RUNNING_PID
    fi
    echo
    return $RETVAL
}

status()
{
    IS_RUNNING=`pgrep -f "$PROC"`
    if [ -n "$IS_RUNNING" ];  then
        echo " $prog  is running, pid: $IS_RUNNING"
    else
        echo " $prog is not running"
    fi
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
    status
    ;;
    restart)
        stop
        echo "Please wait, restarting"
        sleep 2
        start
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        RETVAL=1
esac
exit $RETVAL